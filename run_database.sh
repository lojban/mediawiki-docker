#!/bin/bash

# The defaults for the various options come from this file:
. web_options.sh

# NB: IF YOU CHANGE THE ARGBASH STUFF, run:
#       argbash run_database.sh -o run_database.sh

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([db_version],[v],[MariaDB version, e.g. 10.4],[10.4])
# ARG_OPTIONAL_SINGLE([iteration],[i],[number which is used to force rebuilds even if you haven't changed anything],[1])
# ARG_OPTIONAL_BOOLEAN([test],[t],[Run in test mode (makes a separate instance that doesn't affect the running site at all).],[off])
# ARG_HELP([Runs the web container for the mediawiki])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='vith'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_db_version="10.4"
_arg_iteration="1"
_arg_test="off"


print_help()
{
	printf '%s\n' "Runs the web container for the mediawiki"
	printf 'Usage: %s [-v|--db_version <arg>] [-i|--iteration <arg>] [-t|--(no-)test] [-h|--help]\n' "$0"
	printf '\t%s\n' "-v, --db_version: MariaDB version, e.g. 10.4 (default: '10.4')"
	printf '\t%s\n' "-i, --iteration: number which is used to force rebuilds even if you haven't changed anything (default: '1')"
	printf '\t%s\n' "-t, --test, --no-test: Run in test mode (makes a separate instance that doesn't affect the running site at all). (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-v|--db_version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_db_version="$2"
				shift
				;;
			--db_version=*)
				_arg_db_version="${_key##--db_version=}"
				;;
			-v*)
				_arg_db_version="${_key##-v}"
				;;
			-i|--iteration)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_iteration="$2"
				shift
				;;
			--iteration=*)
				_arg_iteration="${_key##--iteration=}"
				;;
			-i*)
				_arg_iteration="${_key##-i}"
				;;
			-t|--no-test|--test)
				_arg_test="on"
				test "${1:0:5}" = "--no-" && _arg_test="off"
				;;
			-t*)
				_arg_test="on"
				_next="${_key##-t}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-t" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

exec 2>&1
set -e
set -o pipefail -o noclobber -o nounset
set -x

test=''
if [ "$_arg_test" == 'on' ]
then
            test="-test"
fi

CONTAINER_BIN=${CONTAINER_BIN:-$(which podman)}
CONTAINER_BIN=${CONTAINER_BIN:-$(which docker)}

./kill_database.sh "$@"

general_log=""
if [ "$test" ]
then
	general_log="--general-log"
	echo "Copying db data to test folders."
	rsync -aHAX --delete /srv/lojban/mediawiki-container/data/db/ /srv/lojban/mediawiki-container/data/db$test/
fi

# See the run command below for what's going on here
db_port=11036
if [ "$test" ]
then
	db_port=11037
fi

# Ask for a tty if that makes sense
hasterm=''
if tty -s
then
	hasterm='-t'
fi

#************
# Build database
#************
echo
echo "Building db container."
echo

rm -f data/Dockerfile.db
erb db_version=$_arg_db_version \
    db_userid=$(id -u) db_groupid=$(id -g) \
    Dockerfile.db.erb >data/Dockerfile.db
chmod --reference=Dockerfile.db.erb data/Dockerfile.db

$CONTAINER_BIN build -t lojban/mediawiki_db:$_arg_db_version-$_arg_iteration -f data/Dockerfile.db .

echo
echo "Running db container which will listen on $db_port"
echo

# We're exposing $db_port to the host here because you can't use
# --userns=keep-id with pods
# ( https://github.com/containers/libpod/issues/3993 ), and you
# can't share networks between containers with rootless containers (
# https://www.redhat.com/sysadmin/container-networking-podman ), so
# the only way for rootless containers running --userns=keep-id to
# talk to each other is across the host; we talk to "jukni" in
# LocalSettings.php for this reason.
$CONTAINER_BIN run --userns=keep-id --name lojban_mediawiki_db${test} \
	-v /srv/lojban/mediawiki-container/data/db${test}:/var/lib/mysql \
	-v /srv/lojban/mediawiki-container/data/backups${test}:/srv/backups \
        -p $db_port:3306 \
	-i $hasterm lojban/mediawiki_db:$_arg_db_version-$_arg_iteration $general_log

# ] <-- needed because of Argbash
